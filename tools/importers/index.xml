<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Importers on Presidium</title><link>/tools/importers/</link><description>Recent content in Importers on Presidium</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>SPAN Digital</copyright><atom:link href="/tools/importers/index.xml" rel="self" type="application/rss+xml"/><item><title>Importing Documentation</title><link>/tools/importers/reference-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tools/importers/reference-documentation/</guid><description>The Reference section of Presidium should be reserved as a low-level reference for users. Typical components documented in the Reference section may include a client library or API specification. The process of importing documentation involves parsing a reference source and generating articles that are included in the generated site.
Where possible, reference documentation should be generated to ensure that your documentation is in sync with the system being documented.
Presidium supports the following documentation sources:</description></item><item><title>OpenAPI3</title><link>/tools/importers/oapi3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tools/importers/oapi3/</guid><description>Presidium includes a Golang tool (presidium-oapi3 for importing your OpenAPI 3 spec into Presidium documentation.
Add the presidium-oapi3 dependency to your site&amp;rsquo;s package.json or run npm install --save presidium-oapi3. Add a script that invokes the tool. Run npm run import-oapi whenever you need to update your API documentation. { &amp;#34;scripts&amp;#34; : { &amp;#34;import-oapi&amp;#34; : &amp;#34;presidium-oapi3&amp;#34; }, } Example:
$ npm run import-oapi convert -f &amp;lt;YOUR_API_SPEC&amp;gt; -o &amp;lt;THE_OUTPUT_DIRECTORY&amp;gt; -r &amp;lt;THE_PRESIDIUM_REFERENCE_URL&amp;gt; The following options are available for presidium-oapi3:</description></item><item><title>HTML to Markdown converter</title><link>/tools/importers/h2md/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tools/importers/h2md/</guid><description>html2md is a tool that allows you to convert HTML files into Presidium markdown articles.
Installation Usage Advanced Usage Limitations Installation Install from Homebrew
/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)&amp;#34; Add SPAN&amp;rsquo;s Homebrew tap
brew tap SPANDigital/homebrew-tap https://github.com/SPANDigital/homebrew-tap.git Install html2md
brew install html2md Usage Usage: html2md convert [source] [dest] [flags] Flags: -d, --debug enable debug logging --headers strings article header tags (default [h1,h2]) --select string the part of the page to select and convert (default &amp;#34;body&amp;#34;) Params source is the url of the website or the path to the local html file(s).</description></item><item><title>JSON Schema</title><link>/tools/importers/jsonschema/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tools/importers/jsonschema/</guid><description>presidium-json-schema is a CLI tool for importing your JSON Schema spec into Presidium documentation.
Install brew tap SPANDigital/homebrew-tap https://github.com/SPANDigital/homebrew-tap.git brew install presidium-json-schema
Usage Usage: presidium-json-schema convert [path] [flags] Flags: -d, --destination string the output directory (default &amp;#34;.&amp;#34;) -e, --extension string the schema extension (default &amp;#34;*.schema.json&amp;#34;) -o, --ordered preserve the schema order (defaults to alphabetical) -w, --walk walk through sub-directories To convert a file you simply:
presidium-json-schema convert &amp;lt;PATH_TO_SCHEMA_DIR&amp;gt; -d &amp;lt;THE_DESTINATION_DIR&amp;gt;</description></item><item><title>Embed</title><link>/tools/importers/embed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/tools/importers/embed/</guid><description>A fallback approach to importing generated documentation is to embed documentation in an iframe. This approach is not recommended because items are not indexed or available on the main menu. However, it will work for certain cases when an importer is not yet available.
When possible, use a simple template when embedding documentation in an iframe.
To include documentation in an iframe:
Generate the static site documentation for your component. Put the documentation in the /static folder so that it&amp;rsquo;s statically served.</description></item></channel></rss>