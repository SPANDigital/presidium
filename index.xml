<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Presidium</title><link>/</link><description>Recent content on Presidium</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>SPAN Digital</copyright><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Approaches</title><link>/recipes/source-control/approaches/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/recipes/source-control/approaches/</guid><description>Presidium content can be managed in various ways depending on your project needs. Content may be hosted in:
A dedicated repo that only contains documentation A sub-folder of an existing repo A dedicated repo is simpler to configure and easier to manage independently. Managing content within in a sub directory inside the source code repo keeps everything in one place and makes it easier to update the documents while changing the code.</description></item><item><title>Configuration</title><link>/reference/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/configuration/</guid><description>This is a sample Presidium configuration file:
languageCode: en-us title: &amp;#34;Sample Title&amp;#34; copyright: Template Footer pluralizelisttitles: false markup: goldmark: renderer: Unsafe: true parser: attribute: block: true highlight: style: github menu: Main: - identifier: organization-overview name: Organization Overview url: / weight: 1 - identifier: solution-overview name: Solution Overview url: /solution-overview/ weight: 2 - identifier: technology-stack name: Technology Stack url: /technology-stack/ weight: 3 - identifier: tool-chain name: Tool Chain url: /tool-chain/ weight: 4 - identifier: dev-environment-setup name: Dev Environment Setup url: /dev-environment-setup/ weight: 5 - identifier: getting-started name: Getting Started url: /getting-started/ weight: 6 - identifier: reference name: Reference url: /reference/ weight: 7 - identifier: updates name: Updates url: /updates/ weight: 8 outputFormats: MenuIndex: baseName: menu mediaType: application/json SearchMap: baseName: searchmap mediaType: application/json outputs: home: - HTML - RSS - MenuIndex - SearchMap module: imports: - path: github.</description></item><item><title>Directory Structure</title><link>/recipes/content-structure/directory-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/recipes/content-structure/directory-structure/</guid><description>When you create a Presidium site using the CLI init command, Presidium creates the directory structure for the selected template.
Sections and articles are arranged using the weight key in the front matter of each file, and to specify section level title and ordering you may use the _index.md file inside the directory containing a section.
The following is an example of how you can order and organize files and directories:</description></item><item><title>Github Pages</title><link>/recipes/hosting/github-pages/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/recipes/hosting/github-pages/</guid><description>GitHub Pages provides a quick and convenient means of hosting and serving your documentation from a Github repository. The recommended way to host your Presidium site in Github Pages is to use GitHub Actions
If you are using GitHub Actions for the first time you can simply create a push.yaml file under .github/workflows and define your GitHub Pages job, if you already using GitHub Actions, you can simply add a job to deploy your documentation and configure your baseURL accordingly:</description></item><item><title>Headings &amp; Emphasis</title><link>/markdown/headings-and-emphasis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/markdown/headings-and-emphasis/</guid><description>Heading are indicated with a hash.
Heading 1 # Heading 1 Heading 2 ## Heading 2 Heading 3 ### Heading 3 Use either bold, italics, or monospaced font styling for emphasis:
Italicized text
*Italicized text* Bold text
**Bold text** Identifiers and code
`Identifiers and code`</description></item><item><title>Importing Documentation</title><link>/reference/importers/reference-documentation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/importers/reference-documentation/</guid><description>The Reference section of Presidium should be reserved as a low-level reference for users. Typical components documented in the Reference section may include a client library or API specification. The process of importing documentation involves parsing a reference source and generating articles that are included in the generated site.
Where possible, reference documentation should be generated to ensure that your documentation is in sync with the system being documented.
Presidium supports the following documentation sources:</description></item><item><title>Install Presidium</title><link>/getting-started/install-presidium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/getting-started/install-presidium/</guid><description>Tap SPAN&amp;rsquo;s repository
brew tap SPANDigital/homebrew-tap git@github.com:SPANDigital/homebrew-tap.git Install using brew
brew install presidium Install Hugo
brew install hugo</description></item><item><title>Overview</title><link>/reference/front-matter/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/front-matter/overview/</guid><description>Front Matter serves two purposes:
Indicates that the file should be included as an article in the build process Allows you to set properties for your article For example:
--- title: Presidium slug: overview url: front-matter/overview weight: 1 authors: github-username roles: Developer status: Draft --- Presidium includes the following front matter variables:
Variable Description title A string representing the article or subsection title or the title of the subsection. slug A string representing the slug for deep linking the article url A string representing the URL for the article weight A number to provide ordering of articles, a higher number means the article will appear later in the section author A string, generally the Github username of the main author of the article.</description></item><item><title>Plan Content Development</title><link>/best-practices/plan-content-development/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/plan-content-development/</guid><description>Before you write any content, spend some time anticipating what tasks you need to perform and make sure you have the time and resources to achieve your goals.
The following steps work for both small and large projects:
Design the site structure Inventory existing content Plan the conversion of existing content into articles Map the planned articles to your structure Identify required new articles Repurpose existing content into articles Write new articles Proofread and edit Publish Discussion The most important planning task is identifying the scope of your documentation efforts and understanding the needs of your audience.</description></item><item><title>Presidium's Learning Model</title><link>/key-concepts/presidium-learning-model/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/presidium-learning-model/</guid><description>Presidium is more than a framework for producing documentation. It asks you to think about, structure, author, and publish content based on sensible best practices so you can write effective documentation, rather than producing documentation for documentation’s sake.
Supporting Learning Objectives &amp;amp; Efficiency Presidium recommends creating small micro-articles that convey enough information to fulfill a learning objective. Small articles are advantageous because they:
Usually only require a single author Force the author to focus on effectively describing a single concept Enable authors to quickly add documentation while also working on a product or service.</description></item><item><title>The Big Picture</title><link>/overview/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/overview/overview/</guid><description>Presidium is an open-source, static website generator built on Hugo for creating and maintaining software documentation for Agile teams and their users. Being static simplifies publication - you don’t need to provision a server and can host your documentation in a matter of seconds on Github Pages. You can easily include documentation publication in your continuous integration pipeline.
Presidium gives Agile teams a way to evangelize, explain, and support solutions to their peers so they can be correctly used and successfully adopted.</description></item><item><title>Tooltips</title><link>/glossary/tooltip/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/glossary/tooltip/</guid><description>This is an example of a Glossary entry linked to from here.</description></item><item><title>v2.0.0</title><link>/updates/v2.0.0/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v2.0.0/</guid><description>26 May 2022
Summary Replaced Jekyll with Hugo as our static site generator.
New Features Presidium CLI tool that allows you to scaffold new sites from a template. A new Presidium Hugo Theme that replaces the default Jekyll theme.</description></item><item><title>Authors</title><link>/reference/front-matter/authors/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/front-matter/authors/</guid><description>Every article can include an author in the front matter:
--- author: {author name} --- Optional links to authors can be enabled by setting a base URL in the site config:
params: author: external: url: https://github.com/ newTab: false To customize the label for authors, provide a new label in the site config:
params: author: label: Custom Label To hide or show authors on your generated site, enable or disable the component in the site config:</description></item><item><title>Bullets &amp; Numbering</title><link>/markdown/bullets-and-numbering/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/markdown/bullets-and-numbering/</guid><description>Markdown allows bullets and numbering to be nested.
Use bullets to list unordered items.
Bullets Sentence 1. Sentence 2. Nested sentence 1. Nested sentence 2. Double nested sentence. * Sentence 1. * Sentence 2. - Nested sentence 1. - Nested sentence 2. + Double nested sentence. Numbering Use a numbered list for steps that should be done in order. You can number the list yourself or have Presidium do the numbering automatically:</description></item><item><title>Design Documentation Structure</title><link>/best-practices/design-documentation-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/design-documentation-structure/</guid><description>Before starting to write content, you should define the documentation structure to answer questions such as:
How many sections do I need? What should each section cover? Do some sections need sub-sections? Answering these and other questions will help you scope the project and define the content that needs to be found or written.
Keep in mind that although you should decide on the structure of your site at the beginning, you might need to make changes as you gain a deeper understanding of the content.</description></item><item><title>Menu Structure</title><link>/key-concepts/menu-structure/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/menu-structure/</guid><description>Structure For simplicity and transparency, the menu structure and associated directory structure are the same.
Behavior A significant feature of the menu is its tree structure: each section or subsection is a node and content traverses from each node through its children. In Presidium, the node name or title becomes the main header of the page. Everything outside of that sub-tree is not presented on the page. In this example, the user has clicked Content Structure.</description></item><item><title>OpenAPI3</title><link>/reference/importers/oapi3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/importers/oapi3/</guid><description>Presidium includes a Golang tool (presidium-oapi3 for importing your OpenAPI 3 spec into Presidium documentation.
Add the presidium-oapi3 dependency to your site&amp;rsquo;s package.json or run npm install --save presidium-oapi3. Add a script that invokes the tool. Run npm run import-oapi whenever you need to update your API documentation. { &amp;#34;scripts&amp;#34; : { &amp;#34;import-oapi&amp;#34; : &amp;#34;presidium-oapi3&amp;#34; }, } Example:
$ npm run import-oapi convert -f &amp;lt;YOUR_API_SPEC&amp;gt; -o &amp;lt;THE_OUTPUT_DIRECTORY&amp;gt; -r &amp;lt;THE_PRESIDIUM_REFERENCE_URL&amp;gt; The following options are available for presidium-oapi3:</description></item><item><title>Run Presidium</title><link>/getting-started/run-presidium/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/getting-started/run-presidium/</guid><description>Start the wizard to create a new Presidium Site:
presidium init Follow the wizard instructions:
Project Name: The name of the folder that contains your Presidium Site Title: The title for your Presidium Site Template: The template to use. Templates provide different starting sites based on your needs. Theme: The theme to use. Themes provide different look and feel for your Presidium Site Then, navigate to the newly created folder (with your project name) and start a local server:</description></item><item><title>Sub Folder</title><link>/source-control/sub-folder/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/source-control/sub-folder/</guid><description>Presidium can exist within a sub-folder of an existing source code repository, for example, /docs.
Getting Presidium The easiest way to incorporate Presidium into your project is to run the wizard from your project root:
presidium init And specify Project Name as docs, so that, Presidium creates and empty Presidium site under docs/ folder.
The contents of your docs/ folder should look something like this:
config.yaml go.mod content/ static Add the following to your project’s .</description></item><item><title>Themes</title><link>/reference/themes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/themes/</guid><description>Presidium provides some themes when spinning up your Presidium Site through the command line. You will see something like this when running presidium init:
Select a theme ✔ Presidium Theme - (Presidium&amp;#39;s default theme) If you already have a presidium site, you can enable your theme by adding a module in the configuration file:
module: imports: - path: &amp;lt;Your theme&amp;gt; Logo The default Presidium logo image is placed and loaded from the pre-configured template.</description></item><item><title>Design Learning Objectives</title><link>/best-practices/define-learning-objectives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/define-learning-objectives/</guid><description>When defining learning objectives, think carefully about what it means to use your solution effectively by doing the following:
Identify what your audience should know and be able to do after they have read the documentation. Use that information to create a list of learning objectives. Just as stories are used to define software, learning objectives can be written using a standard template.
As a [user] of the [solution] I [know a specific piece of information] or can [perform a specific task] Often, existing stories can be converted into learning objectives with little or no alteration:</description></item><item><title>Directories</title><link>/reference/directories/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/directories/</guid><description>Articles are stored in the content directory. Associated resources, such as images, are stored in the media directory. The config.yaml file is used to configure the project.
Directory Description ./config.yaml General options to configure the project ./content Articles ./static Various resources for the project (images, imported content, etc.) All content changes are monitored; any change triggers a regeneration of the site.</description></item><item><title>Embed</title><link>/reference/importers/embed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/importers/embed/</guid><description>A fallback approach to importing generated documentation is to embed documentation in an iframe. This approach is not recommended because items are not indexed or available on the main menu. However, it will work for certain cases when an importer is not yet available.
When possible, use a simple template when embedding documentation in an iframe.
To include documentation in an iframe:
Generate the static site documentation for your component. Put the documentation in the /static folder so that it&amp;rsquo;s statically served.</description></item><item><title>Sub Module</title><link>/recipes/source-control/sub-module/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/recipes/source-control/sub-module/</guid><description>If you want to store your documentation in a separate repository or share documentation between projects you can use submodules. Use the following steps to set up a submodule.
Create a new repository for you module. Create a config.yml file and add the following module: mounts: - source: content target: content Create a content directory and add your markdown files. E.g. ├── config.yml └── content └── glossary ├── _index.md └── link.</description></item><item><title>Templates</title><link>/key-concepts/templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/templates/</guid><description>Presidium includes article templates for each of the pre-defined sections. Templates are text documents that contain instructions and Markdown which can be modified to meet your needs.
Templates encourage consistency and provide a simple checklist that an author can use for inspiration.
Default Template Design Template Onboarding Template</description></item><item><title>Update Content</title><link>/getting-started/update-content/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/getting-started/update-content/</guid><description>You can make changes to the following files and folders:
content/ Content folder for all your articles config.yaml Site configuration properties static/ Static folder for all your resources (images, etc.) All changes can be made without having to restart the local server</description></item><item><title>User Roles</title><link>/front-matter/user-roles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/front-matter/user-roles/</guid><description>Various roles can be added to a site to allow readers to filter articles and menu items by a target audience.
This optional feature can be enabled by defining user roles in the site config.
params: roles: label: &amp;#34;Show documentation for&amp;#34; all: &amp;#34;All Roles&amp;#34; options: - &amp;#34;Business Analyst&amp;#34; - &amp;#34;Developers&amp;#34; - &amp;#34;Testers&amp;#34; If a role is not specified, articles default to roles.all
Articles can have one or more roles defined in front-matter:</description></item><item><title>Authoring Workflow</title><link>/key-concepts/authoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/authoring/</guid><description>The following workflow is recommended for authoring content using Presidium.
Identify the Author Whether you’re creating a single article or an entire section, make sure to include the author tag in the front matter.
Work Locally Presidium encourages you to write and review documentation on your local machine, rather than making changes directly on Github. The advantages to this workflow are:
Changes are immediately viewable You can leverage Presidium’s validation tools Git commit history will have less noise Protect Master If you own the documentation project, make sure you prevent others from making commits or pushing to the Master branch.</description></item><item><title>Images</title><link>/reference/images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/images/</guid><description>Images Images used within the content should be placed in a static/images directory
/static/images/ -- static/doc-workflow.png Logos and favicons Logos The Logo of the site appears above the Menu Navigation.
Logos should be placed in the static/images directory.
Note: If a brand module is used the instruction above does not apply. Ensure the brand module includes the static/images directory with the logo inside.
The menu bar Logo can be configured in the config file, under params:</description></item><item><title>Inventory Existing Content</title><link>/best-practices/inventory-existing-content/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/inventory-existing-content/</guid><description>When starting a new documentation project, you should first review and evaluate existing content. Content from multiple sources, such as those listed below, can be repurposed:
Existing software documentation Wikis and message boards Design documents Work tickets (epics and stories, bugs) API specifications README files Code comments and markup Help files Emails Meeting notes Project planning materials Before starting:
Compile a list of existing content sources. Identify how each item could be decomposed or converted into an article.</description></item><item><title>Links</title><link>/reference/markdown/links/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/markdown/links/</guid><description>You can link to internal articles in your repository, to external articles, or even to other semantically significant text. Any text enclosed in angle brackets will be interpreted as a link. If you want to add a description, use square brackets for the description and parenthesis for the link.
Internal Page link: Presidium Authors Internal Anchor link: Presidium Authors External link: https://github.com/SPANDigital/presidium Alternative: Presidium on Github - Internal Page link: [Presidium Authors]({{&amp;lt; ref &amp;#34;reference/front-matter/authors.</description></item><item><title>Statuses</title><link>/reference/front-matter/statuses/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/front-matter/statuses/</guid><description>Each article can be assigned a status to track its lifecycle:
draft review published retired Statuses can be set in the site’s front matter:
--- status: draft|review|published|retired --- To show or hide statuses on your generated site, use the following setting in the site config:
params: show: status: true|false</description></item><item><title>Tables</title><link>/reference/markdown/tables/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/markdown/tables/</guid><description>Markdown provides a simple syntax for creating tables using hyphens and horizontal bars / pipes.
first heading second heading third heading row 1 column 1 row 1 column 2 row 1 column 3 row 2 column 1 row 2 column 2 row 2 column 3 row 3 column 1 row 3 column 2 row 3 column 3 row 4 column 1 row 4 column 2 row 4 column 3 | first heading | second heading | third heading | |----------------|----------------|----------------| | row 1 column 1 | row 1 column 2 | row 1 column 3 | | row 2 column 1 | row 2 column 2 | row 2 column 3 | | row 3 column 1 | row 3 column 2 | row 3 column 3 | | row 4 column 1 | row 4 column 2 | row 4 column 3 |</description></item><item><title>Blockquotes</title><link>/reference/markdown/blockquotes/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/markdown/blockquotes/</guid><description>Unusual content can be included in blockquotes, which always begin with a closed angle bracket. In these examples, the Bootstrap Glyphicons have been used to embellish the text.
This is a blockquote
List in blockquote Note! List in blockquote Other examples TODO http://my/url/ Decision: Example: IMPORTANT &amp;gt; **TODO** &amp;gt; &amp;lt;span class=&amp;#34;glyphicon glyphicon-list-alt&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;gt; &amp;lt;http://my/url/&amp;gt; &amp;gt; &amp;lt;span class=&amp;#34;glyphicon glyphicon-tags&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;gt; **Decision:** &amp;gt; &amp;lt;span class=&amp;#34;glyphicon glyphicon-knight&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;gt; **Example:** &amp;gt; &amp;lt;span class=&amp;#34;glyphicon glyphicon-flag&amp;#34;&amp;gt;&amp;lt;/span&amp;gt; &amp;gt; **IMPORTANT** &amp;gt; &amp;lt;span class=&amp;#34;glyphicon glyphicon-exclamation-sign&amp;#34;&amp;gt;&amp;lt;/span&amp;gt;</description></item><item><title>Learning Objectives</title><link>/key-concepts/learning-objectives/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/learning-objectives/</guid><description>You should define the knowledge and skill set of your target audience before starting your documentation. You can then use this information to avoid wasting time explaining information your audience already knows.
Just as stories are used to define software, learning objectives can be written using a standard template: As a [user] of the [solution] I [know a specific piece of information] or can [perform a specific task]
For each learning objective, you should:</description></item><item><title>Use Article Templates</title><link>/best-practices/use-article-templates/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/use-article-templates/</guid><description>Presidium includes article templates for each of the pre-defined sections. Templates are text documents that contain instructions and Markdown which can be modified to meet your needs.
For example, here is the template for the Best Practices section:
```# Template Instructions # --------------------- # 1) Replace any content placeholders with the appropriate content. Search for &amp;quot;REPLACE WITH&amp;quot;. # 2) Delete this line and all lines above so that the front matter below is at the top of the file.</description></item><item><title>Codeblocks</title><link>/reference/markdown/code-blocks/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/markdown/code-blocks/</guid><description>To add code blocks to your content, enclose the code with three backticks. For syntax highlighting, set the language directly after the first set of backticks. Alternatively, you can indent your code / machine output to treat it as preformatted text. For single line inline code, use a single backtick.
Javascript var N = 32; var buffer = new ArrayBuffer(N); ```js var N = 32; var buffer = new ArrayBuffer(N); ``` Python my_array = [i for i in range(0, N)] ```py my_array = [i for i in range(0, N)] ``` C int * my_func(int * in) { return in; } ```c int * my_func(int * in) { return in; } ``` Go package main import &amp;#34;fmt&amp;#34; func main() { fmt.</description></item><item><title>External URLs</title><link>/front-matter/external-urls/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/front-matter/external-urls/</guid><description>Sections can redirect to an external URL either in the same tab or a new one.
This can be done by setting the externalUrl in the site config like so:
menu: main: - identifier: external-link name: External Link url: / weight: 1 params: externalUrl: href: &amp;#34;https://www.anothersite.com&amp;#34; newTab: true - identifier: another-external-link name: Another External Link url: / weight: 2 params: externalUrl: href: &amp;#34;https://www.anothersite.com&amp;#34; newTab: false The newTab attribute is optional and defaults to true</description></item><item><title>Markdown</title><link>/key-concepts/markdown/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/markdown/</guid><description>Markdown is an ubiquitous, lighweight markup language known to almost any engineer. If you don’t know Markdown, it’s easy to learn. Presidium uses a version of Markdown known as Github Flavoured Markdown and leverages this ‘common tongue’ to enable multiple contributors to create documentation quickly without wasting time doing point &amp;amp; click styling or having to alter HTML and CSS.
Style Guides For any documentation project, a Markdown style guide ensures that contributors write documentation that is consistent with your intended tone and layout.</description></item><item><title>Writing Effective Articles</title><link>/best-practices/write-effective-articles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/best-practices/write-effective-articles/</guid><description>Anyone can write great articles if they follow a few simple style guidelines:
Make sure the title explains what the article is about. The title will be used to construct the navigation menu and will often be separated from the article body along side other article titles. Make sure the title works on its own and describes the essence of the article. Keep titles simple and succinct without using humor or colloquialisms.</description></item><item><title>Images</title><link>/reference/markdown/images/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/markdown/images/</guid><description>Image Links Put any images you want to include in the /static/images directory and reference them in the text. Note the exclamation point. The image path may be fully resolved:
![Image Name](/images/logo.png) Image with attributes Sample image {{&amp;lt; img src=&amp;#34;/images/logo.png&amp;#34; caption=&amp;#34;Sample image&amp;#34; style=&amp;#34;width:25%;&amp;#34; &amp;gt;}} Captions To include a caption, add Caption after an image link. For example:
Sample Image With Caption
![Sample Image With Caption](/images/logo.png) *Sample Image With Caption*</description></item><item><title>Micro-articles</title><link>/key-concepts/micro-articles/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/micro-articles/</guid><description>Presidium is built on sound theoretical strategies for developing learning content and managing knowledge assets. The core of this approach is the development of specific focused micro-articles that explain individual concepts.
This splits the problem of content development into two parts:
Defining a site outline based on the concepts that must be documented and how they should be sequenced and presented.
Developing articles that each explain each concept, using a standard template to ensure consistency.</description></item><item><title>Tooltips</title><link>/reference/markdown/tooltips/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/reference/markdown/tooltips/</guid><description>Tooltips display a short definition of an item. There are two ways to create tooltips:
Automatic from the Glossary Via Link Override Automatic Tooltips Automatic tooltips reference Glossary entries. If a Glossary article by the name of “Tooltips” exists, a tooltip will be available for the following item:
TooltipsThis is an example of a Glossary entry linked to from here. {{&amp;lt; tooltip &amp;#34;Tooltips&amp;#34; &amp;gt;}}` Link Override You can use an internal article as the source of a tooltip.</description></item><item><title>Content Maintenance</title><link>/key-concepts/content-maintenance/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/key-concepts/content-maintenance/</guid><description>Presidium is designed to make it easy to write and maintain your documentation. Instead of a monolithic document, Presidium manages a directory structure of micro-articles. The directory structure maps to the sections of your site, while the articles are joined together to build the content of each section. You can create a directory to add new sections and sub-sections. Each section contains a sample article template you can use as a starting point when creating new content.</description></item><item><title>v0.1.42</title><link>/updates/v0.1.42/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.42/</guid><description>21 November 2018
Summary General improvement that includes a small bug fix to the gh-pages command.
Bug Fixes/Enhancements 174</description></item><item><title>v0.1.41</title><link>/updates/v0.1.41/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.41/</guid><description>20 November 2018
Summary General improvements that include updates to the linking out of external sites.
New Features Sections that are External URLs have the option of linking out in a new or existing tab. Site Config If you intend to use this release, make sure your site config is up to date with the latest config.
Bug Fixes/Enhancements 172</description></item><item><title>v0.1.39</title><link>/updates/v0.1.39/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.39/</guid><description>19 September 2018
Summary General improvements that include a new feature to allow sections to be external URLs.
New Features Sections can now be External URLs Site Config If you intend to use this release, make sure your site config is up to date with the latest config.
Bug Fixes/Enhancements 172</description></item><item><title>v0.1.38</title><link>/updates/v0.1.38/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.38/</guid><description>19 September 2018
Summary General improvements that include updates to the scope feature and new documentation content.
New Features Articles can now have multiple Scopes Corrections to the usage of Statuses in the site config Site Config If you intend to use this release, make sure your site config is up to date with the latest config.
Bug Fixes/Enhancements https://github.com/SPANDigital/presidium/issues/170 https://github.com/SPANDigital/presidium/issues/169</description></item><item><title>v0.1.37</title><link>/updates/v0.1.37/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.37/</guid><description>14 September 2018
Summary General improvements that include small bug fixes to Presidium and new documentation content.
New Features Introduced the ability to build internal and external facing documentation using scopes Optional cname parameter in the site config Site Config If you intend to use this release, make sure your site config is up to date with the latest config.
Bug Fixes/Enhancements Github Issues</description></item><item><title>v0.1.9</title><link>/updates/v0.1.9/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.9/</guid><description>4 July 2017
Summary General improvements that include small bug fixes to Presidium and new documentation content.
New Content Markdown New Features Tooltips Landing Page presidium-swagger - A Java-based tool built on top of Swagger2Markup that imports your API&amp;rsquo;s Swagger into your documentation. Site Config If you intend to use this release, make sure your site config is up to date with the latest config.
Bug Fixes 39 50</description></item><item><title>v0.1.8</title><link>/updates/v0.1.8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.8/</guid><description>20 June 2017
Summary General improvements include small bug fixes to Presidium and new documentation content.
Site Config If you intend to use this release, make sure your site config is up to date with the latest config.
New Content Features Benefits Plan Content Development Design Documentation Structure Define Learning Objectives Inventory Existing Content Use Article Templates Writing Effective Articles Bug Fixes #44 #43</description></item><item><title>v0.1.7</title><link>/updates/v0.1.7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.7/</guid><description>13 June 2017
Summary General improvements and features that include support for Jsdoc ingestion and minor bug fixes.
New Features Jsdoc Import: A node tool that imports Javascript comments into your documentation. Bug Fixes #5</description></item><item><title>v0.1.6</title><link>/updates/v0.1.6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/v0.1.6/</guid><description>6 June 2017
Summary General improvements and features that include support for semantic versioning, Javadoc ingestion, and link validation.
New Features Semantic Versioning: Adds support to publish and switch between different site versions Javadoc Import: Java doclet to import source code comments to Presidium Link validation: Tool to check for any broken links</description></item><item><title>License</title><link>/updates/license/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/updates/license/</guid><description>Presidium was created by SPAN Digital
Copyright 2022 SPAN Digital Licensed under the Apache License, Version 2.0 (the &amp;#34;License&amp;#34;); you may not use this file except in compliance with the License. You may obtain a copy of the License at [http://www.apache.org/licenses/LICENSE-2.0] Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an &amp;#34;AS IS&amp;#34; BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.</description></item><item><title>Content Versioning</title><link>/content-versioning/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/content-versioning/</guid><description>The versioning tool allows the content creator keep up tp 5 versions of the content. These versions live under the project/versions folder. The tool always discards the oldest version number if the user request more than 5 versions. By default this tool is not enabled and only has to be enabled once.
Workflow Enable to versioning feature (once only):
presidium versioning --enable Start the next version.
presidium versioning next Update the last version.</description></item><item><title>Issues</title><link>/support/issues/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/support/issues/</guid><description>If you experience any issues with Presidium, please log an issue so that we can continue to improve the product.</description></item><item><title>Link Validation</title><link>/link-validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/link-validation/</guid><description>This tool reports links within a Presidium site. You can use this tool see which links are broken, points to non standard protocols.
The tool does not need a live Presidium site to work against, so the site does not need to be deployed.
How to use the tool Generate a local public site by running presidium hugo:
presidium hugo Next run the tool pointing to the public site:
presidium report pagelinks .</description></item><item><title>Prerequisites</title><link>/prerequisites/prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/prerequisites/prerequisites/</guid><description>The following tools are required to use Presidium:
Install Homebrew
/bin/bash -c &amp;#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&amp;#34; Add the Presidium Tap
brew tap SPANDigital/homebrew-tap git@github.com:SPANDigital/homebrew-tap.git Install Presidium
brew install presidium</description></item></channel></rss>